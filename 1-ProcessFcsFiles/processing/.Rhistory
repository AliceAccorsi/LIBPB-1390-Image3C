library(flowCore)
library(flowStats)
library(ggcyto)
library(ggridges)
library(stringr)
library(Hmisc)
library(caret)
library(pheatmap)
library(reshape2)
library(data.table)
library(RColorBrewer)
source("AuxFunctions.R") #sources functions from this file in same directory
myflowset <- read.flowSet(pattern = ".fcs", path = ".", alter.names = TRUE, transformation = FALSE, emptyValue = FALSE) #read all fcs files in current dir to flowset
myflowset@phenoData@data$name
mycolnames <- as.character(colnames(exprs(myflowset[[4]]))) #get all channel names
autoplot(myflowset[[4]]) #use "snail1_phago"
myframe <- myflowset[[4]] #pull out a single flow frame
mat <- exprs(myframe) #extract matrix
cor_mat <- cor(mat, method = "spearman") #get correlation matrix
pheatmap(cor_mat) #plot it using clustering heatmaps
myfrm <- data.frame(exprs(myframe)) #convert data from 1st sample to data frame object
frmTrim <- DaMiR.FReduct(myfrm, th.corr = 0.85) #removes features with Cor values > 0.85
colstrimmed <- colnames(frmTrim) #get names of remaining features
toremove <- setdiff(mycolnames, colstrimmed) #set operation to find difference with total
myflowset <- dropSet(myflowset, toremove)
myflowset@phenoData@data$name
myframe <- myflowset[[4]] #pull out a single flow frame
mat <- exprs(myframe) #extract matrix
cor_mat <- cor(mat, method = "spearman") #get correlation matrix
pheatmap(cor_mat) #plot it using clustering heatmaps
myMeans <- extractMeans(myflowset) #get a list of features means, one list item per file
myMeans <- rbindlist(myMeans) #combine to one big table
myMeans <- dcast(myMeans, Sample ~ Feature, value.var = "Means") #recast to wide form
rownames(myMeans) <- myMeans$Sample #rename rownames
myMeans[,1] <- NULL #remove redundant col
myMeans[] <- lapply(myMeans, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
meansMat <- as.matrix(myMeans) #convert to matrix
rownames(meansMat) <- rownames(myMeans)
meansMat[!is.finite(meansMat)] #check for infinite values
write.csv(rownames(meansMat), file="NamesToGroup.csv") #save table to manually annotate things if needed
rowAnnot <- read.csv(file="RowLabels.csv")
View(rowAnnot)
rownames(rowAnnot) <- rownames(meansMat) #put rownames from means table
rowAnnot[,1] <- NULL #remove redudant column
setdiff(myflowset@phenoData@data$names,rowAnnot$X) #check that sample names match, should return NULL
pheatmap(meansMat, scale = "column", annotation_row = rowAnnot) #make clustering heatmap of feature means per sample
rowAnnot <- rowAnnot[,"Desc"]
rowAnnot <- read.csv(file="RowLabels.csv")
rownames(rowAnnot) <- rownames(meansMat) #put rownames from means table
rowAnnot[,1] <- NULL #remove redudant column
setdiff(myflowset@phenoData@data$names,rowAnnot$X) #check that sample names match, should return NULL
rowAnnot <- rowAnnot[,2]
rowAnnot <- read.csv(file="RowLabels.csv")
rownames(rowAnnot) <- rownames(meansMat) #put rownames from means table
rowAnnot[,1] <- NULL #remove redudant column
setdiff(myflowset@phenoData@data$names,rowAnnot$X) #check that sample names match, should return NULL
rowAnnot <- as.data.frame(rowAnnot[,2])
View(rowAnnot)
colnames(rowAnnot) <- "Desc"
pheatmap(meansMat, scale = "column", annotation_row = rowAnnot) #make clustering heatmap of feature means per sample
rownames(rowAnnot) <- rownames(meansMat)
pheatmap(meansMat, scale = "column", annotation_row = rowAnnot) #make clustering heatmap of feature means per sample
pheatmap(cor(t(meansMat)))
mycolnames
myflowset@phenoData@data$name
mycolnames <- colnames(myflowset[[4]])
mycolnames
source("AuxFunctions.R") #sources functions from this file in same directory
flowsetScaled <- scaleDNA(myflowsetTrans)
mycolnames <-  colnames(myflowset[[4]]) #get new list of parm names
autoplot(myflowset[[4]]) #plot all histograms
ChnlsToTrans <- mycolnames[c(15:18)] #which parms to transform
translist <- estimateLogicle(myflowset[[4]], ChnlsToTrans) #estimate logicle transform from data
myflowsetTrans <- transform(myflowset, translist) #apply logicle transform to flowset
autoplot(myflowsetTrans[[4]])
p <- ggcyto(myflowsetTrans, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(2.5,5))
flowsetScaled <- scaleDNA(myflowsetTrans)
p <- ggcyto(myflowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(2.5,5))
mycolnames
p <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(2.5,5))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-2,2))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
p <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch02'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p2 <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch07'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p3 <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p3 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
myflowset@phenoData@data$name
?subsetting
tokeep <- myflowset@phenoData@data$name
tokeep[,c(1:20)]
tokeep[1:20]
tokeep <- tokeep[1:20]
flowsetScaled1 <- flowsetScaled[c(tokeep)]
flowsetScaled1
mycolnames
maxlms <- c(2)
ChnlsToNorm <- mycolnames[18] #Intensity CTV, Max Pixel draq5
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p4 <- ggcyto(myflowsetNorm, aes(x = 'Max.Pixel_Morphology_DNA_Ch11'))
p4 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p4 <- ggcyto(myflowsetNorm, aes(x = 'Max.Pixel_Morphology_DNA_Ch11'))
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.density.thr = 0.2) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.density.thr = 0.1) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.15) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
maxlms <- c(1)
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.15) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
maxlms <- c(2)
ChnlsToNorm <- mycolnames[18] #Intensity CTV, Max Pixel draq5
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.3) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
maxlms <- c(3)
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.1) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.2) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled1, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.2) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
maxlms <- c(2)
ChnlsToNorm <- mycolnames[18] #Intensity CTV, Max Pixel draq5
normResult <- gaussNorm(flowsetScaled1, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.2) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
library(flowCore)
library(flowStats)
library(ggcyto)
library(ggridges)
library(stringr)
library(Hmisc)
library(caret)
library(pheatmap)
library(reshape2)
library(data.table)
library(RColorBrewer)
source("AuxFunctions.R") #sources functions from this file in same directory
myflowset <- read.flowSet(pattern = ".fcs", path = ".", alter.names = TRUE, transformation = FALSE, emptyValue = FALSE) #read all fcs files in current dir to flowset
mycolnames <- as.character(colnames(exprs(myflowset[[4]]))) #get all channel names
myflowset@phenoData@data$name
library(flowCore)
library(flowStats)
library(ggcyto)
library(ggridges)
library(stringr)
library(Hmisc)
library(caret)
library(pheatmap)
library(reshape2)
library(data.table)
library(RColorBrewer)
source("AuxFunctions.R") #sources functions from this file in same directory
autoplot(myflowset[[4]]) #use "snail1_phago"
myflowset@phenoData@data$name
myframe <- myflowset[[4]] #pull out a single flow frame
mat <- exprs(myframe) #extract matrix
cor_mat <- cor(mat, method = "spearman") #get correlation matrix
pheatmap(cor_mat) #plot it using clustering heatmaps
myfrm <- data.frame(exprs(myframe)) #convert data from 1st sample to data frame object
frmTrim <- DaMiR.FReduct(myfrm, th.corr = 0.85) #removes features with Cor values > 0.85
source("AuxFunctions.R") #sources functions from this file in same directory
source("AuxFunctions.R") #sources functions from this file in same directory
myfrm <- data.frame(exprs(myframe)) #convert data from 1st sample to data frame object
frmTrim <- DaMiR.FReduct(myfrm, th.corr = 0.85) #removes features with Cor values > 0.85
colstrimmed <- colnames(frmTrim) #get names of remaining features
toremove <- setdiff(mycolnames, colstrimmed) #set operation to find difference with total
myflowset <- dropSet(myflowset, toremove)
myframe <- myflowset[[4]] #pull out a single flow frame
mat <- exprs(myframe) #extract matrix
cor_mat <- cor(mat, method = "spearman") #get correlation matrix
pheatmap(cor_mat) #plot it using clustering heatmaps
myMeans <- extractMeans(myflowset) #get a list of features means, one list item per file
myMeans <- rbindlist(myMeans) #combine to one big table
myMeans <- dcast(myMeans, Sample ~ Feature, value.var = "Means") #recast to wide form
rownames(myMeans) <- myMeans$Sample #rename rownames
myMeans[,1] <- NULL #remove redundant col
#convert all to numeric
myMeans[] <- lapply(myMeans, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
meansMat <- as.matrix(myMeans) #convert to matrix
rownames(meansMat) <- rownames(myMeans)
meansMat[!is.finite(meansMat)] #check for infinite values
write.csv(rownames(meansMat), file="NamesToGroup.csv") #save table to manually annotate things if needed
rowAnnot <- read.csv(file="RowLabels.csv")
rownames(rowAnnot) <- rownames(meansMat) #put rownames from means table
rowAnnot[,1] <- NULL #remove redudant column
setdiff(myflowset@phenoData@data$names,rowAnnot$X) #check that sample names match, should return NULL
View(rowAnnot)
pheatmap(meansMat, scale = "column", annotation_row = rowAnnot) #make clustering heatmap of feature means per sample
pheatmap(cor(t(meansMat)))
mycolnames <-  colnames(myflowset[[4]]) #get new list of parm names
autoplot(myflowset[[4]]) #plot all histograms
mycolnames
ChnlsToTrans <- mycolnames[c(15:18)] #which parms to transform
translist <- estimateLogicle(myflowset[[4]], ChnlsToTrans) #estimate logicle transform from data
myflowsetTrans <- transform(myflowset, translist) #apply logicle transform to flowset
autoplot(myflowsetTrans[[4]])
mycolnames <- colnames(myflowset[[4]])
flowsetScaled <- scaleDNA(myflowsetTrans)
p <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
p <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch02'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p2 <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch07'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
maxlms <- c(2)
ChnlsToNorm <- mycolnames[18] #Intensity CTV, Max Pixel draq5
normResult <- gaussNorm(flowsetScaled1, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.2) #normalize DNA parm
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.2) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.3) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.1,
peak.density.thr = 0.01) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.1,
peak.density.thr = 0.05) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
p <- ggcyto(myflowsetTrans, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
p <- ggcyto(myflowsetTrans, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() #+ xlim(c(-3,3))
myflowset@phenoData@data$name
tokeep <- myflowset@phenoData@data$name
tokeep <- tokeep[c(1:11,13:20)]
tokeep
flowsetScaled[c(tokeep)]  #Remove snail6, DHR staining not similar to others.
flowsetScaled <- flowsetScaled[c(tokeep)]  #Remove that sample (keep all but index 12 in list of names)
p <- ggcyto(myflowsetTrans, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null() #+ xlim(c(-3,3))
p <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch02'))
p + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p2 <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch07'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null()
p3 <- ggcyto(flowsetScaled, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p3 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
maxlms <- c(1)
ChnlsToNorm <- mycolnames[18] #Intensity CTV, Max Pixel draq5
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.1,
peak.density.thr = 0.05) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
maxlms <- c(2)
ChnlsToNorm <- mycolnames[18] #Intensity CTV, Max Pixel draq5
normResult <- gaussNorm(flowsetScaled, channel.names = ChnlsToNorm,
max.lms = maxlms,
peak.distance.thr = 0.1,
peak.density.thr = 0.05) #normalize DNA parm
myflowsetNorm <- normResult$flowset #pull out flowset from returned object
p2 <- ggcyto(myflowsetNorm, aes(x = 'Intensity_AdaptiveErode_BF_Ch11'))
p2 + geom_density_ridges(aes(y = as.factor(name))) + facet_null() + xlim(c(-3,3))
dir <- getwd()
mynames <- myflowset@phenoData@data$name #get file names from flowset
mynames <- strsplit(mynames, "\\.") #string split on "."
mynames <- sapply(mynames, function(x) strsplit(x, ":")[[1]][1]) #get out 1st element from strsplit output
mynames <- paste(mynames, "_processed.fcs", sep = "") #paste in new suffixes
mynames
write.flowSet(myflowsetNorm, dir, filename = mynames)
dir <- getwd()
mynames <- myflowsetNorm@phenoData@data$name #get file names from flowset
mynames <- strsplit(mynames, "\\.") #string split on "."
mynames <- sapply(mynames, function(x) strsplit(x, ":")[[1]][1]) #get out 1st element from strsplit output
mynames <- paste(mynames, "_processed.fcs", sep = "") #paste in new suffixes
mynames
write.flowSet(myflowsetNorm, dir, filename = mynames)
